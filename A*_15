#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
#include <math.h>
#define ROW 4
#define COL 4
using namespace std;

//方向枚举
enum direction {
	N = 0,
	S = 1,
	W = 2,
	E = 3
};

class State {
private:
	int state = NULL;
	int d = NULL;
	int p = NULL;
	int f = NULL;
public:
	int direction = NULL;		// 记录方向
	int s[ROW][COL];
	State *father = NULL;		// 记录父节点
	State() {};
	State(int s[ROW][COL], int t[ROW][COL], int state = 0){		// 初始化
		memcpy(this->s, s, sizeof(int) * ROW * COL);
		this->state = state;
		father = NULL;
	};
	void setS0(int d, int f) {
		this->d = d;
		this->f = f;
	}
	bool compare(int t[ROW][COL]) {		// 判断是否到目标状态
		int sum = 0;
		for(int i = 0; i < ROW; i++)
			for (int j = 0; j < COL; j++) {
				if (s[i][j] == t[i][j])
					sum++;
			}
		if (sum == 16)
			return true;
		else
			return false;
	}
	void setS(int s[ROW][COL]) {
		memcpy(this->s, s, sizeof(int) * ROW * COL);
	}
	void setD(int t[ROW][COL]) {	// 计算深度
		d += 1;
		setP(t);
	}
	void setP(int t[ROW][COL]) {		// 计算最短距离之和
		int count = 0;
		for(int i = 0; i < ROW; i++)
			for (int j = 0; j < COL; j++) {
				for(int m = 0; m < ROW; m++)
					for (int k = 0; k < COL; k++) {
						if (s[i][j] == t[m][k] && s[i][j] != 0) {
							count += abs(i - m) + abs(j - k);
						}
					}
			}
		p = count;
		setF();
	}
	void setF() {
		f = getP() + getD();
	}
	int getF() {
		return f;
	}
	int getD() {
		return d;
	}
	int getP() {
		return p;
	}
	bool up(int t[ROW][COL]) {
		if (direction != S) {//上一步不是向下移
			int temp;
			direction = N;//这步是向上移
			for (int i = 0; i < ROW; i++) {
				for (int j = 0; j < COL; j++) {
					if (s[i][j] == 0 && i - 1 >= 0) {
						temp = s[i][j];
						s[i][j] = s[i - 1][j];
						s[i - 1][j] = temp;
						setD(t);
						return true;
						break;
					}
				}
			}
		}
		setD(t);
		return false;
	}
	bool down(int t[ROW][COL]) {
		if (direction != N) {//上一步不是向上移
			int temp;
			direction = S;//这步是向下移
			for (int i = 0; i < ROW; i++) {
				for (int j = 0; j < COL; j++) {
					if (s[i][j] == 0 && i + 1 < ROW) {
						temp = s[i][j];
						s[i][j] = s[i + 1][j];
						s[i + 1][j] = temp;
						setD(t);
						return true;
						break;
					}
				}
			}
		}
		setD(t);
		return false;
	}
	bool left(int t[ROW][COL]) {
		if (direction != E) {//上一步不是向右移
			int temp;
			direction = W;//这步是向左移
			for (int i = 0; i < ROW; i++) {
				for (int j = 0; j < COL; j++) {
					if (s[i][j] == 0 && j - 1 >= 0) {
						temp = s[i][j];
						s[i][j] = s[i][j - 1];
						s[i][j - 1] = temp;
						setD(t);
						return true;
						break;
					}
				}
			}
		}
		setD(t);
		return false;
	}
	bool right(int t[ROW][COL]) {
		if (direction != W) {//上一步不是向左移
			int temp;
			direction = E;//这步是向右移
			for (int i = 0; i < ROW; i++) {
				for (int j = 0; j < COL; j++) {
					if (s[i][j] == 0 && j + 1 < COL) {
						temp = s[i][j];
						s[i][j] = s[i][j + 1];
						s[i][j + 1] = temp;
						setD(t);
						return true;
						break;
					}
				}
			}
		}
		setD(t);
		return false;
	}
	bool operator<(const State &temp) const {
		return f < temp.f;
	}
	void show() {
		for (int i = 0; i < ROW; i++) {
			for (int j = 0; j < COL; j++) {
				cout << s[i][j] << ' ';
				if (j == COL - 1)
					cout << endl;	
			}
		}
		cout << "D值为：" << d << "    ";
		cout << "P值为：" << p << "    ";
		cout << "F值为：" << f << endl;
		cout << endl;
	}
};

class AStar {
private:
	vector<State> open;
	vector<State> close;
	State start;
	State end;
	int count = 0;
public:
	AStar(State start, State end){
		this->start = start;
		this->end = end;
		open.reserve(1000);
		close.reserve(1000);
		this->start.father = NULL;		// 设置初始节点
		this->start.setS0(-1, 0);
		this->start.setD(end.s);
		open.push_back(this->start);
	}
	void printOpen() {		// 打印open表
		for (vector<State>::iterator it = open.begin(); it != open.end(); it++)
			it->show();
	}
	void printClose() {		// 打印close表
		for (vector<State>::iterator it = close.begin(); it != close.end(); it++)
			it->show();
	}
	bool ifInOpen(State temp) {		// 判断是否在open表
		int i = 0;
		vector<State>::iterator it;
		for (it = open.begin(); it != open.end(); it++) {
			if (temp.compare(it[0].s) && temp.getF() < it[0].getF()) {
				open.erase(open.begin() + i);
				open.push_back(temp);
				return true;
			}
			i++;
		}
		return false;
	}
	bool ifInClose(State temp) {		// 判断是否在close表
		int i = 0;
		vector<State>::iterator it;
		for (it = close.begin(); it != close.end(); it++) {
			if (temp.compare(it[0].s) && temp.getF() < it[0].getF()) {
				close.erase(close.begin() + i);
				open.push_back(temp);
				return true;
			}
			i++;
		}
		return false;
	}

	bool fun(int t[ROW][COL]) {
		while (true) {
			cout << "循环次数:" << ++count << endl;
			if (open.empty())		// open表为空查询失败
				return false;
			State p = open.front();	
			p.show();
			close.push_back(p);		// 将估值最小的元素加入close表
			if (p.compare(t))		// 判断是否为目标状态
				return true;
			open.erase(open.begin());		// 从open表弹出估值最小的元素
			State temp = p;
			if (temp.up(t)) {		// 上移
				temp.father = &close.back();
				if (ifInOpen(temp) == 0 && ifInClose(temp) == 0)
					open.push_back(temp);
			}
			temp = p;
			if (temp.down(t)) {		// 下移
				temp.father = &close.back();
				if (ifInOpen(temp) == 0 && ifInClose(temp) == 0)
					open.push_back(temp);
			}
			temp = p;
			if (temp.left(t)) {		// 左移
				temp.father = &close.back();
				if (ifInOpen(temp) == 0 && ifInClose(temp) == 0)
					open.push_back(temp);
			}
			temp = p;
			if (temp.right(t)) {		// 右移
				temp.father = &close.back();
				if (ifInOpen(temp) == 0 && ifInClose(temp) == 0)
					open.push_back(temp);
			}
			reverse(open.begin(), open.end());		// 对open表进行排序
			sort(open.begin(), open.end());
		}
	}
	void output() {		// 输出结果
		State *p = new State;
		stack<State> s;
		*p = close.back();
		for (; p != NULL; p = p->father) {
			s.push(*p);
		}
		while (!s.empty()) {
			State k = s.top();
			k.show();
			s.pop();
		}
	}
};


int main()
{
	int start[ROW][COL] = { {5, 1, 2, 4}, {9, 6, 3, 8}, {13, 15, 10, 11}, {14, 0, 7, 12} };
	int end[ROW][COL] = { {1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 0} };
	State s1(start, end);
	State s(end, end);
	s1.show();
	AStar a(s1, s);
	vector<State> res;
	a.fun(end);
	cout << "result:" << endl;
	a.output();

	return 0;
}
